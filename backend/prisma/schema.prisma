// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @unique @db.VarChar(256)
  mobile    String   @unique
  role      Role     @default(USER)
  password  String   @db.VarChar(256)
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  PostLike     PostLike[]
  Follower     Follower[]
  Comment      Comment[]
  LikedComment LikedComment[]
  PostView     PostView[]
  Post         Post[]
  UserProfile  UserProfile?
}

model UserProfile {
  id           String   @id @default(uuid()) @db.VarChar(36)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String   @unique @db.VarChar(256)
  name         String
  profilePhoto String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Post {
  id          String   @id @default(uuid()) @db.VarChar(36)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @db.VarChar(36)
  file        String?
  description String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  PostLike PostLike[]
  Comment  Comment[]
  PostView PostView[]
  PostTag  PostTag[]
}

model Tag {
  id        String    @id @default(uuid()) @db.VarChar(36)
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  PostTag   PostTag[]
}

model PostTag {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.VarChar(36)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String   @db.VarChar(36)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}

model PostView {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model Follower {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([userId])
}

model Comment {
  id        String   @id @default(uuid()) @db.VarChar(36)
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  LikedComment LikedComment[]
}

model LikedComment {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String   @db.VarChar(36)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([userId, commentId])
}

enum Role {
  USER @map("USER")
}
